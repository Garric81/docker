docker ps  --  запущенные
docker ps -a  #запущенные  и остановленые
docker images  ---- образа список
docker  rm images_name --- удалене образов
docker rm id_conteiner ---удаление контейнера
docker container prune --- удаление  все контейнеров всех
docker --version
###########################################
docker run hello-world
docker run images_name 
docker pull images_name
############################################

docker run -it images_name
docker stop id_conteiner (name_comteiner)
docker  run -d(# запуск фоново)  nginx
docker container inspect id_conteiner | grep (exapmple IPAddress)
####################################################################

запуск  дополнительного процесса внутри контейнера
docker exec -it id_conteiner(run) bash --Название  нового процесса
hostname -i
ls
/usr/share/nginx/html# exit
docker ps
docker run -d  --name my_ngnix(новое имя) nginx

######################################################################

docker run - p 8080:80 nginx
-p # публикация порта
8080 - #внешний  порта
80 # внутриний порт контейнера
nginx --- # название образа  к кому пробрасваем

####################################################################

docker run -v ${PWD}:/usr/share/nginx/html nginx

run ---  запуск контейнера
v --  подключение томов

{$PWD} --- Путь к  локальной папке
/usr/share/nginx/html ---  путь  в контейнере
docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx

docker volume

Создадим тестовый том:
docker volume create slurm-storage
slurm-storage

Ключ командной строки для Docker при работе с томами.

Для volume или bind mount:

--volume | -v

Для tmpfs:

--tmpfs

Команды для управления томами в интерфейсе CLI Docker:

$ docker volume

Commands:
  create   Create a volume (Создать том)
  inspect  Display detailed information on one or more
        volumes (Отобразить детальную информацию)
  ls    List volumes (Вывести список томов)
  prune Remove all unused volumes (Удалить все неиспользуемые тома)
  rm    Remove one or more volumes (Удалить один или несколько томов)

Создадим тестовый том:

$ docker volume create slurm-storage
slurm-storage

Вот он появился в списке:

$ docker volume ls
DRIVER  VOLUME NAME
local   slurm-storage

Команда inspect выдаст примерно такой список информации в json:

$ docker inspect slurm-storage
[
    {
        "CreatedAt": "2020-12-14T15:00:37Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/slurm-storage/_data",
        "Name": "slurm-storage",
        "Options": {},
        "Scope": "local"
    }
]

Попробуем использовать созданный том, запустим с ним контейнер:


$ docker run --rm -v slurm-storage:/data -it ubuntu:20.10 /bin/bash
# echo $RANDOM > /data/file
# cat /data/file
13279
# exit

После самоуничтожения контейнера запустим другой и подключим к нему тот же том. Проверяем, что в нашем файле:


$ docker run --rm -v slurm-storage:/data -it centos:8 /bin/bash -c "cat /data/file"
13279

То же самое, отлично.

Теперь примонтируем каталог с хоста:

$ docker run -v /srv:/host/srv --name slurm --rm -it ubuntu:20.10 /bin/bash

Docker не любит относительные пути, лучше указывайте абсолютные!

Теперь попробуем совместить оба типа томов сразу:

$ docker run -v /srv:/host/srv -v slurm-storage:/data --name slurm --rm -it ubuntu:20.10 /bin/bash

Отлично! А если нам нужно передать ровно те же тома другому контейнеру?

$ docker run --volumes-from slurm --name backup --rm -it centos:8 /bin/bash

Вы можете заметить некий лаг в обновлении данных между контейнерами, это зависит от используемого Docker драйвера файловой системы.


Создавать том заранее необязательно, всё сработает в момент запуска docker run:


$ docker run -v newslurm:/newdata -v /srv:/host/srv -v slurm-storage:/data --name slurm --rm -it ubuntu:20.10 /bin/bash
Посмотрим теперь на список томов:

$ docker volume ls
DRIVER  VOLUME NAME
local   slurm-storage
local   newslurm

Ещё немного усложним команду запуска, создадим анонимный том:


$ docker run -v /anonymous -v newslurm:/newdata -v /srv:/host/srv -v slurm-storage:/data --name slurm --rm -it ubuntu:20.10 /bin/bash

Такой том самоуничтожится после выхода из контейнера, так как мы указали ключ –rm.


Если этого не сделать, давайте проверим что будет:


$ docker run -v /anonymous -v newslurm:/newdata -v /srv:/host/srv -v slurm-storage:/data --name slurm -it ubuntu:20.10 /bin/bash
$ docker volume ls
DRIVER  VOLUME NAME
local     04c490b16184bf71015f7714b423a517ce9599e9360af07421ceb54ab96bd333
local   newslurm
local   slurm-storage

Хозяйке на заметку: тома (как образы и контейнеры) ограничены значением настройки dm.basesize, которая устанавливается на уровне настроек демона Docker. Как правило, что-то около 10Gb. Это значение можно изменить вручную, но потребуется перезапуск демона Docker.


При запуске демона с ключом это выглядит так:


$ sudo dockerd --storage-opt dm.basesize=40G

Однажды увеличив значение, его уже нельзя просто так уменьшить. При запуске Docker выдаст ошибку.


Если вам нужно вручную очистить содержимое всех томов, придётся удалять каталог, предварительно остановив демон:


$ sudo service docker stop
$ sudo rm -rf /var/lib/docker

